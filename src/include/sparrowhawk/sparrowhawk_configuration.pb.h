// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparrowhawk_configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sparrowhawk_5fconfiguration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sparrowhawk_5fconfiguration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sparrowhawk_5fconfiguration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sparrowhawk_5fconfiguration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sparrowhawk_5fconfiguration_2eproto;
namespace speech {
namespace sparrowhawk {
class SparrowhawkConfiguration;
class SparrowhawkConfigurationDefaultTypeInternal;
extern SparrowhawkConfigurationDefaultTypeInternal _SparrowhawkConfiguration_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> ::speech::sparrowhawk::SparrowhawkConfiguration* Arena::CreateMaybeMessage<::speech::sparrowhawk::SparrowhawkConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speech {
namespace sparrowhawk {

// ===================================================================

class SparrowhawkConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.SparrowhawkConfiguration) */ {
 public:
  SparrowhawkConfiguration();
  virtual ~SparrowhawkConfiguration();

  SparrowhawkConfiguration(const SparrowhawkConfiguration& from);
  SparrowhawkConfiguration(SparrowhawkConfiguration&& from) noexcept
    : SparrowhawkConfiguration() {
    *this = ::std::move(from);
  }

  inline SparrowhawkConfiguration& operator=(const SparrowhawkConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparrowhawkConfiguration& operator=(SparrowhawkConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparrowhawkConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparrowhawkConfiguration* internal_default_instance() {
    return reinterpret_cast<const SparrowhawkConfiguration*>(
               &_SparrowhawkConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SparrowhawkConfiguration& a, SparrowhawkConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(SparrowhawkConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparrowhawkConfiguration* New() const final {
    return CreateMaybeMessage<SparrowhawkConfiguration>(nullptr);
  }

  SparrowhawkConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparrowhawkConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparrowhawkConfiguration& from);
  void MergeFrom(const SparrowhawkConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparrowhawkConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.SparrowhawkConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sparrowhawk_5fconfiguration_2eproto);
    return ::descriptor_table_sparrowhawk_5fconfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenizerGrammarFieldNumber = 1,
    kVerbalizerGrammarFieldNumber = 2,
    kSentenceBoundaryRegexpFieldNumber = 3,
    kSentenceBoundaryExceptionsFileFieldNumber = 4,
    kSerializationSpecFieldNumber = 5,
  };
  // optional string tokenizer_grammar = 1;
  bool has_tokenizer_grammar() const;
  private:
  bool _internal_has_tokenizer_grammar() const;
  public:
  void clear_tokenizer_grammar();
  const std::string& tokenizer_grammar() const;
  void set_tokenizer_grammar(const std::string& value);
  void set_tokenizer_grammar(std::string&& value);
  void set_tokenizer_grammar(const char* value);
  void set_tokenizer_grammar(const char* value, size_t size);
  std::string* mutable_tokenizer_grammar();
  std::string* release_tokenizer_grammar();
  void set_allocated_tokenizer_grammar(std::string* tokenizer_grammar);
  private:
  const std::string& _internal_tokenizer_grammar() const;
  void _internal_set_tokenizer_grammar(const std::string& value);
  std::string* _internal_mutable_tokenizer_grammar();
  public:

  // optional string verbalizer_grammar = 2;
  bool has_verbalizer_grammar() const;
  private:
  bool _internal_has_verbalizer_grammar() const;
  public:
  void clear_verbalizer_grammar();
  const std::string& verbalizer_grammar() const;
  void set_verbalizer_grammar(const std::string& value);
  void set_verbalizer_grammar(std::string&& value);
  void set_verbalizer_grammar(const char* value);
  void set_verbalizer_grammar(const char* value, size_t size);
  std::string* mutable_verbalizer_grammar();
  std::string* release_verbalizer_grammar();
  void set_allocated_verbalizer_grammar(std::string* verbalizer_grammar);
  private:
  const std::string& _internal_verbalizer_grammar() const;
  void _internal_set_verbalizer_grammar(const std::string& value);
  std::string* _internal_mutable_verbalizer_grammar();
  public:

  // optional string sentence_boundary_regexp = 3;
  bool has_sentence_boundary_regexp() const;
  private:
  bool _internal_has_sentence_boundary_regexp() const;
  public:
  void clear_sentence_boundary_regexp();
  const std::string& sentence_boundary_regexp() const;
  void set_sentence_boundary_regexp(const std::string& value);
  void set_sentence_boundary_regexp(std::string&& value);
  void set_sentence_boundary_regexp(const char* value);
  void set_sentence_boundary_regexp(const char* value, size_t size);
  std::string* mutable_sentence_boundary_regexp();
  std::string* release_sentence_boundary_regexp();
  void set_allocated_sentence_boundary_regexp(std::string* sentence_boundary_regexp);
  private:
  const std::string& _internal_sentence_boundary_regexp() const;
  void _internal_set_sentence_boundary_regexp(const std::string& value);
  std::string* _internal_mutable_sentence_boundary_regexp();
  public:

  // optional string sentence_boundary_exceptions_file = 4;
  bool has_sentence_boundary_exceptions_file() const;
  private:
  bool _internal_has_sentence_boundary_exceptions_file() const;
  public:
  void clear_sentence_boundary_exceptions_file();
  const std::string& sentence_boundary_exceptions_file() const;
  void set_sentence_boundary_exceptions_file(const std::string& value);
  void set_sentence_boundary_exceptions_file(std::string&& value);
  void set_sentence_boundary_exceptions_file(const char* value);
  void set_sentence_boundary_exceptions_file(const char* value, size_t size);
  std::string* mutable_sentence_boundary_exceptions_file();
  std::string* release_sentence_boundary_exceptions_file();
  void set_allocated_sentence_boundary_exceptions_file(std::string* sentence_boundary_exceptions_file);
  private:
  const std::string& _internal_sentence_boundary_exceptions_file() const;
  void _internal_set_sentence_boundary_exceptions_file(const std::string& value);
  std::string* _internal_mutable_sentence_boundary_exceptions_file();
  public:

  // optional string serialization_spec = 5;
  bool has_serialization_spec() const;
  private:
  bool _internal_has_serialization_spec() const;
  public:
  void clear_serialization_spec();
  const std::string& serialization_spec() const;
  void set_serialization_spec(const std::string& value);
  void set_serialization_spec(std::string&& value);
  void set_serialization_spec(const char* value);
  void set_serialization_spec(const char* value, size_t size);
  std::string* mutable_serialization_spec();
  std::string* release_serialization_spec();
  void set_allocated_serialization_spec(std::string* serialization_spec);
  private:
  const std::string& _internal_serialization_spec() const;
  void _internal_set_serialization_spec(const std::string& value);
  std::string* _internal_mutable_serialization_spec();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.SparrowhawkConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokenizer_grammar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verbalizer_grammar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sentence_boundary_regexp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sentence_boundary_exceptions_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialization_spec_;
  friend struct ::TableStruct_sparrowhawk_5fconfiguration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparrowhawkConfiguration

// optional string tokenizer_grammar = 1;
inline bool SparrowhawkConfiguration::_internal_has_tokenizer_grammar() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparrowhawkConfiguration::has_tokenizer_grammar() const {
  return _internal_has_tokenizer_grammar();
}
inline void SparrowhawkConfiguration::clear_tokenizer_grammar() {
  tokenizer_grammar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SparrowhawkConfiguration::tokenizer_grammar() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  return _internal_tokenizer_grammar();
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const std::string& value) {
  _internal_set_tokenizer_grammar(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline std::string* SparrowhawkConfiguration::mutable_tokenizer_grammar() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  return _internal_mutable_tokenizer_grammar();
}
inline const std::string& SparrowhawkConfiguration::_internal_tokenizer_grammar() const {
  return tokenizer_grammar_.GetNoArena();
}
inline void SparrowhawkConfiguration::_internal_set_tokenizer_grammar(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tokenizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tokenizer_grammar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tokenizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tokenizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline std::string* SparrowhawkConfiguration::_internal_mutable_tokenizer_grammar() {
  _has_bits_[0] |= 0x00000001u;
  return tokenizer_grammar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparrowhawkConfiguration::release_tokenizer_grammar() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  if (!_internal_has_tokenizer_grammar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tokenizer_grammar_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_tokenizer_grammar(std::string* tokenizer_grammar) {
  if (tokenizer_grammar != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tokenizer_grammar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokenizer_grammar);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}

// optional string verbalizer_grammar = 2;
inline bool SparrowhawkConfiguration::_internal_has_verbalizer_grammar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparrowhawkConfiguration::has_verbalizer_grammar() const {
  return _internal_has_verbalizer_grammar();
}
inline void SparrowhawkConfiguration::clear_verbalizer_grammar() {
  verbalizer_grammar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SparrowhawkConfiguration::verbalizer_grammar() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  return _internal_verbalizer_grammar();
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const std::string& value) {
  _internal_set_verbalizer_grammar(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline std::string* SparrowhawkConfiguration::mutable_verbalizer_grammar() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  return _internal_mutable_verbalizer_grammar();
}
inline const std::string& SparrowhawkConfiguration::_internal_verbalizer_grammar() const {
  return verbalizer_grammar_.GetNoArena();
}
inline void SparrowhawkConfiguration::_internal_set_verbalizer_grammar(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verbalizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  verbalizer_grammar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  verbalizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  verbalizer_grammar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline std::string* SparrowhawkConfiguration::_internal_mutable_verbalizer_grammar() {
  _has_bits_[0] |= 0x00000002u;
  return verbalizer_grammar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparrowhawkConfiguration::release_verbalizer_grammar() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  if (!_internal_has_verbalizer_grammar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return verbalizer_grammar_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_verbalizer_grammar(std::string* verbalizer_grammar) {
  if (verbalizer_grammar != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verbalizer_grammar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verbalizer_grammar);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}

// optional string sentence_boundary_regexp = 3;
inline bool SparrowhawkConfiguration::_internal_has_sentence_boundary_regexp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SparrowhawkConfiguration::has_sentence_boundary_regexp() const {
  return _internal_has_sentence_boundary_regexp();
}
inline void SparrowhawkConfiguration::clear_sentence_boundary_regexp() {
  sentence_boundary_regexp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SparrowhawkConfiguration::sentence_boundary_regexp() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  return _internal_sentence_boundary_regexp();
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const std::string& value) {
  _internal_set_sentence_boundary_regexp(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline std::string* SparrowhawkConfiguration::mutable_sentence_boundary_regexp() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  return _internal_mutable_sentence_boundary_regexp();
}
inline const std::string& SparrowhawkConfiguration::_internal_sentence_boundary_regexp() const {
  return sentence_boundary_regexp_.GetNoArena();
}
inline void SparrowhawkConfiguration::_internal_set_sentence_boundary_regexp(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sentence_boundary_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sentence_boundary_regexp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sentence_boundary_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sentence_boundary_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline std::string* SparrowhawkConfiguration::_internal_mutable_sentence_boundary_regexp() {
  _has_bits_[0] |= 0x00000004u;
  return sentence_boundary_regexp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparrowhawkConfiguration::release_sentence_boundary_regexp() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  if (!_internal_has_sentence_boundary_regexp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sentence_boundary_regexp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_sentence_boundary_regexp(std::string* sentence_boundary_regexp) {
  if (sentence_boundary_regexp != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sentence_boundary_regexp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sentence_boundary_regexp);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}

// optional string sentence_boundary_exceptions_file = 4;
inline bool SparrowhawkConfiguration::_internal_has_sentence_boundary_exceptions_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SparrowhawkConfiguration::has_sentence_boundary_exceptions_file() const {
  return _internal_has_sentence_boundary_exceptions_file();
}
inline void SparrowhawkConfiguration::clear_sentence_boundary_exceptions_file() {
  sentence_boundary_exceptions_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SparrowhawkConfiguration::sentence_boundary_exceptions_file() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  return _internal_sentence_boundary_exceptions_file();
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const std::string& value) {
  _internal_set_sentence_boundary_exceptions_file(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline std::string* SparrowhawkConfiguration::mutable_sentence_boundary_exceptions_file() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  return _internal_mutable_sentence_boundary_exceptions_file();
}
inline const std::string& SparrowhawkConfiguration::_internal_sentence_boundary_exceptions_file() const {
  return sentence_boundary_exceptions_file_.GetNoArena();
}
inline void SparrowhawkConfiguration::_internal_set_sentence_boundary_exceptions_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sentence_boundary_exceptions_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sentence_boundary_exceptions_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sentence_boundary_exceptions_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sentence_boundary_exceptions_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline std::string* SparrowhawkConfiguration::_internal_mutable_sentence_boundary_exceptions_file() {
  _has_bits_[0] |= 0x00000008u;
  return sentence_boundary_exceptions_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparrowhawkConfiguration::release_sentence_boundary_exceptions_file() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  if (!_internal_has_sentence_boundary_exceptions_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sentence_boundary_exceptions_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_sentence_boundary_exceptions_file(std::string* sentence_boundary_exceptions_file) {
  if (sentence_boundary_exceptions_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sentence_boundary_exceptions_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sentence_boundary_exceptions_file);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}

// optional string serialization_spec = 5;
inline bool SparrowhawkConfiguration::_internal_has_serialization_spec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SparrowhawkConfiguration::has_serialization_spec() const {
  return _internal_has_serialization_spec();
}
inline void SparrowhawkConfiguration::clear_serialization_spec() {
  serialization_spec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SparrowhawkConfiguration::serialization_spec() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  return _internal_serialization_spec();
}
inline void SparrowhawkConfiguration::set_serialization_spec(const std::string& value) {
  _internal_set_serialization_spec(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline std::string* SparrowhawkConfiguration::mutable_serialization_spec() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  return _internal_mutable_serialization_spec();
}
inline const std::string& SparrowhawkConfiguration::_internal_serialization_spec() const {
  return serialization_spec_.GetNoArena();
}
inline void SparrowhawkConfiguration::_internal_set_serialization_spec(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  serialization_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparrowhawkConfiguration::set_serialization_spec(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  serialization_spec_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline void SparrowhawkConfiguration::set_serialization_spec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  serialization_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline void SparrowhawkConfiguration::set_serialization_spec(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  serialization_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline std::string* SparrowhawkConfiguration::_internal_mutable_serialization_spec() {
  _has_bits_[0] |= 0x00000010u;
  return serialization_spec_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparrowhawkConfiguration::release_serialization_spec() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  if (!_internal_has_serialization_spec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return serialization_spec_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_serialization_spec(std::string* serialization_spec) {
  if (serialization_spec != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  serialization_spec_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialization_spec);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sparrowhawk_5fconfiguration_2eproto
